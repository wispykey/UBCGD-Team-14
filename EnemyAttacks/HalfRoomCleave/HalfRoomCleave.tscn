[gd_scene load_steps=10 format=3 uid="uid://clu4w56s8h1yo"]

[ext_resource type="Texture2D" uid="uid://d3xo3eh5tmrh8" path="res://Assets/Objects/triangle_flashing.png" id="1_crh5r"]
[ext_resource type="PackedScene" uid="uid://ceqhna2t88e55" path="res://EnemyAttacks/HalfRoomCleave/Flame.tscn" id="3_0ea2r"]
[ext_resource type="Texture2D" uid="uid://cok6ft5dn25st" path="res://Assets/Objects/star.png" id="3_sb7lo"]

[sub_resource type="GDScript" id="GDScript_wayfl"]
script/source = "extends Node2D

@export var telegraph_image: PackedScene
@export var attack_image: PackedScene

const DIRECTIONS = [\"WEST\", \"EAST\", \"NORTH\", \"SOUTH\"]
const TILE_SIZE = 32

var telegraph_duration: int  = 4 # Measured in beats
# Width x Height of the attack, measured in tiles
var direction: String = \"\"
var dimensions: Vector2 # Measured in tiles
var coords: Vector2 # Measured in tiles

# Called when the node enters the scene tree for the first time.
func _ready() -> void:
	$TelegraphTimer.wait_time = telegraph_duration * Conductor.seconds_per_quarter_note
	$TelegraphTimer.timeout.connect(_on_telegraph_timer_timeout)
	$DespawnTimer.timeout.connect(_on_despawn_timer_timeout)
	# Disable collisions during telegraph
	$HitZone.monitorable = false
	$HitZone.monitoring = false


func start(direction: String):
	set_direction(direction)
	
	normalize_position()
	compute_dimensions()
	generate_collision_area()
	
	$TelegraphTimer.start()
	add_scene_on_every_tile($Telegraph, telegraph_image)
	
	
# Allows parent nodes to set orientation of attack
func set_direction(cardinal: String):
	# Default to West on invalid input
	if cardinal not in DIRECTIONS:
		direction = \"WEST\"
	else:
		direction = cardinal


func add_scene_on_every_tile(parent: Node2D, scene: PackedScene):
	var x_offset: float = 0
	var y_offset: float = 0
	var x_invert: int = 1
	var y_invert: int = 1
	
	match direction:
		\"WEST\":
			x_invert = -1
			x_offset = 0
			y_offset = -floor(dimensions.y/2)
		\"EAST\":
			x_offset = 0
			y_offset = -floor(dimensions.y/2)
		\"NORTH\":
			y_invert = -1
			x_offset = -floor(dimensions.x/2)
			y_offset = 0
		\"SOUTH\":
			x_offset = -floor(dimensions.x/2)
			y_offset = 0
		
	for i in dimensions.x:
		for j in dimensions.y:
			var telegraph = scene.instantiate()
			telegraph.position.x = x_invert * TILE_SIZE*(i + x_offset)
			telegraph.position.y = y_invert * TILE_SIZE*(j + y_offset)
			parent.add_child(telegraph)	


func normalize_position():
	var viewport = get_viewport_rect()
	var center = viewport.get_center()
	
	# Originate from center of arena by default
	if position == Vector2.ZERO:
		position.x = center.x
		position.y = center.y
		
	# Center along an axis where appropriate
	match direction:
		\"WEST\", \"EAST\":
			position.y = center.y
		\"NORTH\", \"SOUTH\":
			position.x = center.x
	
	# Get the position of top-left corner of the bounding tile
	var x = int(position.x) - int(position.x) % TILE_SIZE
	var y = int(position.y) - int(position.y) % TILE_SIZE
	
	# Set position to be the middle of tile, so that images appear centered
	position.x = x + TILE_SIZE / 2
	position.y = y + TILE_SIZE / 2
	
	# Store grid-based coordinates
	coords.x = x / TILE_SIZE
	coords.y = y / TILE_SIZE
			
			
func compute_dimensions():
	var viewport = get_viewport_rect()
	var max_x = viewport.size.x / TILE_SIZE
	var max_y = viewport.size.y / TILE_SIZE
	
	# Include the column/row that the attacker is standing on
	match direction:
		\"WEST\":
			dimensions.x = coords.x+1
			dimensions.y = max_y
		\"EAST\":
			dimensions.x = max_x - (coords.x-1)
			dimensions.y = max_y
		\"NORTH\":
			dimensions.x = max_x
			dimensions.y = coords.y+1
		\"SOUTH\":
			dimensions.x = max_x
			dimensions.y = max_y - coords.y
			
	print(\"Cleaving \", direction, \" from tile \", coords,
		  \", in a \", dimensions.x, \"x\", dimensions.y, \" area\")


# HitZone is intentionally missing CollisionShape. Added here.
func generate_collision_area():
	var collision_shape = CollisionShape2D.new()
	var rect_shape = RectangleShape2D.new()
	rect_shape.size = dimensions * TILE_SIZE
	collision_shape.set_shape(rect_shape)
	$HitZone.add_child(collision_shape)
	match direction:
		\"EAST\":
			$HitZone.position.x = (dimensions.x-1) * TILE_SIZE/2.0
		\"WEST\":
			$HitZone.position.x = -(dimensions.x-1) * TILE_SIZE/2.0
		\"NORTH\":
			$HitZone.position.y = -(dimensions.y-1) * TILE_SIZE/2.0
			$HitZone.position.x -= TILE_SIZE/2.0
		\"SOUTH\":
			$HitZone.position.y = (dimensions.y-1)* TILE_SIZE/2.0
			$HitZone.position.x -= TILE_SIZE/2.0
	

func _on_telegraph_timer_timeout():
	# Enable collision area
	$HitZone.monitoring = true
	$HitZone.monitorable = true

	# Could be optimized to avoid adding more children
	$Telegraph.visible = false
	add_scene_on_every_tile(self, attack_image)
	$DespawnTimer.start()
			
			
func _on_despawn_timer_timeout():
	call_deferred(\"queue_free\")
	
"

[sub_resource type="AtlasTexture" id="AtlasTexture_wquxr"]
atlas = ExtResource("1_crh5r")
region = Rect2(0, 0, 32, 32)

[sub_resource type="SpriteFrames" id="SpriteFrames_0h3fw"]
animations = [{
"frames": [{
"duration": 1.0,
"texture": SubResource("AtlasTexture_wquxr")
}],
"loop": true,
"name": &"flash",
"speed": 5.0
}]

[sub_resource type="GDScript" id="GDScript_yr2tp"]
script/source = "extends AnimatedSprite2D


# Called when the node enters the scene tree for the first time.
func _ready() -> void:
	Conductor.quarter_beat.connect(_on_quarter_beat)

func _on_quarter_beat(_beat_num: int):
	visible = !visible
"

[sub_resource type="PackedScene" id="PackedScene_nsa5n"]
_bundled = {
"conn_count": 0,
"conns": PackedInt32Array(),
"editable_instances": [],
"names": PackedStringArray("AlertSign", "AnimatedSprite2D", "z_index", "sprite_frames", "animation", "autoplay", "script"),
"node_count": 1,
"node_paths": [],
"nodes": PackedInt32Array(-1, -1, 1, 0, -1, 5, 2, 0, 3, 1, 4, 2, 5, 3, 6, 4, 0),
"variants": [1, SubResource("SpriteFrames_0h3fw"), &"flash", "flash", SubResource("GDScript_yr2tp")],
"version": 3
}

[sub_resource type="GDScript" id="GDScript_wcys5"]
script/source = "extends Area2D

var damage: int = 5

func _ready() -> void:
	body_entered.connect(_on_body_entered)
	
func _on_body_entered(body: Node2D):
	print(\"LeftFireCleave: Detected player\")
	call_deferred(\"set_monitorable\", false)
"

[node name="HalfRoomCleave" type="Node2D"]
script = SubResource("GDScript_wayfl")
telegraph_image = SubResource("PackedScene_nsa5n")
attack_image = ExtResource("3_0ea2r")

[node name="TelegraphTimer" type="Timer" parent="."]
one_shot = true

[node name="HitZone" type="Area2D" parent="."]
collision_layer = 16
script = SubResource("GDScript_wcys5")

[node name="Telegraph" type="Node2D" parent="."]

[node name="DespawnTimer" type="Timer" parent="."]
one_shot = true

[node name="Sprite2D" type="Sprite2D" parent="."]
texture = ExtResource("3_sb7lo")
